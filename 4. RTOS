1. FreeRTOS
  1.1 Task
    a. States
      - Running
        A task is actually executing.
      - Ready
        A task is able to execute but are not currently executing.
      - Blocked
        A task is currently waiting for either a temporal or external event.
      - Suspended
        A task cannot be selected to enter the Running state and do not have a time out, only can be resumed.
        
    b. Scheduling Algorithms
      - Preemption
        -- Pre-emptive scheduling without time slicing algorithms will immediately 'pre-empt' the running state task if a task that 
        has a priority higher than the running state task either enters the Ready state or the task in the Running state enters 
        the Blocked or Suspended state.
        -- Pre-emptive scheduling with time slicing algorithms will select a higher priority task to enter the Running state 
        at the end of each time slice.
      - Time Slicing
        Time slicing is used to share processing time between tasks of equal priority, even when the tasks do not explicitly 
        yield or enter the Blocked state. A time slice is equal to the time between two RTOS tick interrupts.
      - Round Robin scheduling
        The algorithm does not guarantee time is shared equally between tasks of equal priority, only that Ready state 
        tasks of equal priority will enter the Running state in turn.
      - Co-operative scheduling
        A context switch will only occur when the Running state task enters the Blocked state, or the Running state task 
        explicitly yields (manually requests a re-schedule) by calling taskYIELD(). Tasks are never pre-empted, so time
        slicing cannot be used.
    
  1.2 Inter-task Communication
    a. Direct to task notifications
      - Each RTOS task has a 32-bit notification value, can use as lightweight semaphore to unblock a task.
    b. Steam & Message buffers
      - Task to task or interrupt to task communication primitives, be optimised for single reader single writer scenarios.
      - Data is passed by copy - the data is copied into the buffer by the sender and out of the buffer by the read.
    c. Queues
      - Queues are primary form of intertask communications, used as FIFO buffers with new data being sent to the back of the queue, 
        although data can also be sent to the front.
    d. Binary semaphore
      - Binary semaphores are used for both mutual exclusion and synchronisation purposes.
      - Binary semaphores do not include a priority inheritance mechanism, better choice for implementing synchronisation.
    e. Counting semaphore
      - Counting semaphores can be thought of as queues that have a length of more than one. 
      - Tasks are not interested in the data that is stored in the queue—just the number of items in the queue.
      - Typically are used for Counting events and resource management.
    f. Event group
      - Event groups allow a task to wait in the Blocked state for a combination of one of more events to occur.
      - Event groups unblock all the tasks that were waiting for the same event, or combination of events, when the event occurs.
      
  1.3 Resource Management
    a. Priority Inversion
      - A higher priority task being delayed by a lower priority task in this manner is called ‘priority inversion’.
    b. Priority Inheritance
      - Priority inheritance works by temporarily raising the priority of the mutex holder to the priority of 
        the highest priority task that is attempting to obtain the same mutex.The low priority task that holds 
        the mutex ‘inherits’ the priority of the task waiting for the mutex.
    c. Mutexes
      - Mutexes include a priority inheritance mechanism.
        -- If two tasks of different priority use the same mutex, then the FreeRTOS scheduling policy makes the order 
           in which the tasks will execute clear; the highest priority task that is able to run will be selected as the task 
           that enters the Running state.
        -- If two tasks of same priority use the same mutex, the task A waiting for a mutex that held by task B will not pre-empt 
           when task B 'gives' the mutex, instead, task B will remain in the Running state and task A will simply move from the 
           Blocked state to the Ready state.
      - A mutex can only be unlocked by the mutex holder, Semaphore can be unlocked or 'give' by any other tasks, so the Mutexes are
        better choice for implementing simple mutual exclusion.
    d. Recursive Mutexes
      - A recursive mutex can be ‘taken’ more than once by the same task, and will be returned only after one call to ‘give’ the 
        recursive mutex has been executed for every preceding call to ‘take’ the recursive mutex.
    e. Deadlock
      - Deadlock occurs when two tasks cannot proceed because they are both waiting for a resource that is held by the other.
      - Use a time out that is a little longer than the maximum time it is expected to have to wait for the mutex.
    f. Critical Sections
      - It works by disabling interrupt,either completely, or up to the interrupt priority.
      - Basic critical sections must be kept very short, otherwise they will adversely affect interrupt response times.
      - It is safe for critical sections to become nested, because the kernel keeps a count of the nesting depth.
      - Critical sections can also be created by suspending the scheduler, or 'locking' the scheduler.
  1.4 Interrupt Management
    Tasks will only run when there are no ISRs running, so the lowest priority interrupt will interrupt the highest priority task, 
    and there is no way for a task to pre-empt an ISR.
    a. Deferred Interrupt Processing
      - An interrupt service routine must record the cause of the interrupt, and clear the interrupt. Any other processing necessitated 
        by the interrupt can often be performed in a task, allowing the interrupt service routine to exit as quickly as is practical.
    b. Binary Semaphores Used for Synchronization
      - xSemaphoreTake()/xSemaphoreGiveFromISR()
    c. Centralized Deferred Interrupt Processing
      - Deferring interrupt processing to the daemon task.The xTimerPendFunctionCall() and xTimerPendFunctionCallFromISR() API functions
        use the same timer command queue to send an ‘execute function’ command to the daemon task. The function sent to the daemon task
        is then executed in the context of the daemon task.
  1.5 Memory Management
    - Heap_1
      The very simplest, does not permit memory to be freed.
    - Heap_2
      Permits memory to be freed, but does not coalescence adjacent free blocks.
    - Heap_3
      Simply wraps the standard malloc() and free() for thread safety.
    - Heap_4
      Coalescences adjacent free blocks to avoid fragmentation. Includes absolute address placement option.
    - Heap_5
      As per heap_4, with the ability to span the heap across multiple non-adjacent memory areas.
      
