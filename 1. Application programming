1 C/C++ programming
  1.1 Key words
    - Static
      a. Static local variables in function
        Store in RW data section if be initialized, store in BSS section if not be initialized.
      b. Static gloable varibales in file
        Store in RW data section if be initialized, store in BSS section if not be initialized.
      c. Static functions in the file
        
    - Volatile
      Tell the compiler should not optimize the data with volatile word and read the value from actual memory,not from register afer optimization.
      Const value and pointer can be volatile.
      
    - Const
      Read-Ony value and store in RO data section.
      
    - Extern
      Extern value
      Extern "C" to compile and link the code with C rules.
      
    - __inline
      
    - assert
      Assert is Macro not function, terminate the function if the condition is false.
      
    - sizeof
      For array, return the size of entire array data.
      For pointer, return size of only pointer.
    
  1.2 Memory layout
    - Static area
      -- Text section
        --- Code
        --- Read-only data
      -- Read-Write data -- Initialized Data Segment
      -- BSS -- Uninitialized Data Segment
    - Dynamic area
      -- Heap -- Malloc/New
      -- Stack
  1.3 Compile
    - Preprocess
      a. #define,#undef
      b. #if,#ifdef,#ifudef,#else,#endif
      c. #include header file
      d. other # symbol
      
    - Compile
      1. Syntax and semantics parsing
      2. Optimization
      3. Generate assemly instruction from C/C++
      
    - Assembly
      Generate target machine instruction from assembly instruction.
      
    - Linking
      Link symbols from different files or libraries.
      -- Static linking
      -- Dynamic linking
  
2 Algorithm
  2.1 Searching
    - BST
      a. If the tree is empty,then return fail,otherwise;
      b. If the target value equals the value of root node,then return success,otherwise;
      c. If the target is less than the value of root node,then search the left child tree,otherwise;
      d. Search the right child tree.
    - Binary
    - Fibonacci
    - Insertion
    - Sequential
    
  2.2 Sorting
    - Bubble
      a. Compare the neighbour value, if the first one is larger than the second one, then swap them;
      b. Compare all the neighbour from first pair to last pair, then the last value will be biggest;
      --------------------------------------------------------
      int nArray[], int nLength;
      for(int i = 0;i < nLength;i++){
          int j = i;
          int temp;
          
          while((i > 0)&&(j > 0)&&(nArray[j] < nArray[j-1])){
              temp = nArray[j-1];
              nArray[j-1] = nArray[j]; 
              nArray[j] = temp;
              j--;
          }
      }
      for(int i = 0;i < nLength;i++){
          printf("%d ",nArray[i]);
      }
      printf("\r\n");
      ---------------------------------------------------
    - Bucket
      a. Set up an array of initially empty "buckets".
      b. Scatter: Go over the original array, putting each object in its bucket.
      c. Sort each non-empty bucket.
      d. Gather: Visit the buckets in order and put all elements back into the original array.
    - Counting
    - Heap
    - Insert
    - Merge
    - Quick
    - Radix
    - Selection
    - Shell
  2.2 Power Set
    -----------------------------------------------------
    void GetPowerSet(int nArray[], int nLength)
    {
	int mark = 0;
	int i = 0;
	int nStart = 0;
	int nEnd = (1 << nLength) -1;
	bool bNullSet = false,bDup = false;

	//sort
	for(i = 0;i < nLength;i++){
		int j = i;
		int temp;

	    //compare with all previous items
		while((i > 0)&&(j > 0)&&(nArray[j] < nArray[j-1])){
			temp = nArray[j-1];
			nArray[j-1] = nArray[j]; 
			nArray[j] = temp;
			j--;
		}
		
	}
	for(i = 0;i < nLength;i++){
		printf("%d ",nArray[i]);
	}
	printf("\r\n");
	
	//print
	for (mark = nStart; mark <= nEnd; mark++)
	{
		bNullSet = true;
		bDup = false;
		printf("%d:",mark);
		for (i = 0; i < nLength; i++){
			if (((1<<i)&mark) != 0) //item check
			{
				//only print duplicate item when print previous same item
				if((i > 0)&&(nArray[i] == nArray[i-1])
					&&(((1<<(i-1))&mark) == 0)){
					bDup = true;
				}
			}
		}
		if(!bDup){
			for (i = 0; i < nLength; i++){
				if (((1<<i)&mark) != 0) //item print
				{
				    bNullSet = false;
				    printf("%d ", nArray[i]);
			    }
		    }
		    if (bNullSet) //empty item
		    {
			    printf("null ");
		    }
		}
		printf("\n");
		
	}
    }
    -----------------------------------------------------
    
3 Data Structure
  3.1 Struct
  3.2 Enum
  3.3 Union
  
