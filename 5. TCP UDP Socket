1 TCP
  1.1 Connection establishment --
    a. Client send SYN with random A as sequence number to server;
    b. Server replies SYN-ACK with ack number A+1 and random B as sequence number to client;
    c. Clinet replies ACK with ack number B+1;
    
  1.2 Connection termination
    a. Initiator send FIN to receiver, initiator enter FIN_WAIT_1 status and receiver enter CLOSE_WAIT status;
    b. Receiver replies ACK to initiator,initiator enter FIN_WAIT_2 status;
    c. Receiver send FIN to Initiator, receiver enter LAST_ACK status;
    d. Initiator replies ACK to receiver, initiator enter TIME_WAIT status and receiver enter CLOSED status,initiator enter CLOSED status after 2MSL;
  
  1.3 Reliable transmission
    TCP uses a sequence number to identify each byte of data.
    
  1.4 Retransmission
    - Dupack-based retransmission
      Recevier send ACK to sender with same packet number 3 times if one of pakcet lost,the sender will retransmit the last unacknowledged packet.
    - Timeout-based retransmission
      Sender waits a timeout and transmits that packet again if don't receive ACK.
      
  1.4 Flow control
    TCP uses a sliding window flow control protocol, the receiver specifies in the receive window field the amount of additionally received data (in bytes) that it is willing to buffer for the connection.
    The sending host can send only up to that amount of data before it must wait for an acknowledgement and window update from the receiving host.
    
  1.5 Congestion control
    - Slow start
      a. Set congestion window to cwnd = 1,and send 1 MSS packet;
      b. cwnd++ when receive ACK each time and it will equal cwnd*2 after one RTT;
      c. when cwnd >= ssthresh,the slow start threshold,then enter "Congestion avoidance";
    - Congestion avoidance
      a. cwnd+1 each one RTT interval;
    - Fast retransmit
      Same as "Dupack-based retransmission".
    - Fast recovery
      a. If sender receive 3 duplicated ACK, cwnd = cwnd/2,ssthresh = cwnd;
      b. New cwnd = ssthresh * 3MSS,sender retransmits the packet that indicated by the 3 duplicated ACK;
      c. cwnd = cwnd + 1, if receive duplicated ack again;
      d. cwnd = ssthresh, if receive new ack, and enter "Congestion avoidance".
    
2 UDP

3 Socket
